/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.wavemaker.financeai.promptResponse.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.wavemaker.financeai.promptResponse.model.ResponseCandlestickChart;
import com.wavemaker.financeai.promptResponse.model.ResponseDataTable;
import com.wavemaker.financeai.promptResponse.model.ResponseLineChart;
import com.wavemaker.financeai.promptResponse.model.ResponseMetricsEntryItem;
import java.util.ArrayList;
import java.util.List;
/**
 * RootResponse
 */

public class RootResponse {
  @JsonProperty("defaultChart")
  private String defaultChart = null;

  @JsonProperty("symbol")
  private String symbol = null;

  @JsonProperty("lastUpdated")
  private String lastUpdated = null;

  @JsonProperty("candlestickChart")
  private ResponseCandlestickChart candlestickChart = null;

  @JsonProperty("data-table")
  private ResponseDataTable data_table = null;

  @JsonProperty("companyName")
  private String companyName = null;

  @JsonProperty("lineChart")
  private ResponseLineChart lineChart = null;

  @JsonProperty("long-answer")
  private String long_answer = null;

  @JsonProperty("currency")
  private String currency = null;

  @JsonProperty("metrics")
  private List<ResponseMetricsEntryItem> metrics = new ArrayList<>();

  @JsonProperty("short-answer")
  private String short_answer = null;

  public RootResponse defaultChart(String defaultChart) {
    this.defaultChart = defaultChart;
    return this;
  }

   /**
   * Get defaultChart
   * @return defaultChart
  **/
  public String getDefaultChart() {
    return defaultChart;
  }

  public void setDefaultChart(String defaultChart) {
    this.defaultChart = defaultChart;
  }

  public RootResponse symbol(String symbol) {
    this.symbol = symbol;
    return this;
  }

   /**
   * Get symbol
   * @return symbol
  **/
  public String getSymbol() {
    return symbol;
  }

  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }

  public RootResponse lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * Get lastUpdated
   * @return lastUpdated
  **/
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }

  public RootResponse candlestickChart(ResponseCandlestickChart candlestickChart) {
    this.candlestickChart = candlestickChart;
    return this;
  }

   /**
   * Get candlestickChart
   * @return candlestickChart
  **/
  public ResponseCandlestickChart getCandlestickChart() {
    return candlestickChart;
  }

  public void setCandlestickChart(ResponseCandlestickChart candlestickChart) {
    this.candlestickChart = candlestickChart;
  }

  public RootResponse data_table(ResponseDataTable data_table) {
    this.data_table = data_table;
    return this;
  }

   /**
   * Get data_table
   * @return data_table
  **/
  public ResponseDataTable getDataTable() {
    return data_table;
  }

  public void setDataTable(ResponseDataTable data_table) {
    this.data_table = data_table;
  }

  public RootResponse companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

   /**
   * Get companyName
   * @return companyName
  **/
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }

  public RootResponse lineChart(ResponseLineChart lineChart) {
    this.lineChart = lineChart;
    return this;
  }

   /**
   * Get lineChart
   * @return lineChart
  **/
  public ResponseLineChart getLineChart() {
    return lineChart;
  }

  public void setLineChart(ResponseLineChart lineChart) {
    this.lineChart = lineChart;
  }

  public RootResponse long_answer(String long_answer) {
    this.long_answer = long_answer;
    return this;
  }

   /**
   * Get long_answer
   * @return long_answer
  **/
  public String getLongAnswer() {
    return long_answer;
  }

  public void setLongAnswer(String long_answer) {
    this.long_answer = long_answer;
  }

  public RootResponse currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public RootResponse metrics(List<ResponseMetricsEntryItem> metrics) {
    this.metrics = metrics;
    return this;
  }

  public RootResponse addMetricsItem(ResponseMetricsEntryItem metricsItem) {
    this.metrics.add(metricsItem);
    return this;
  }

   /**
   * Get metrics
   * @return metrics
  **/
  public List<ResponseMetricsEntryItem> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<ResponseMetricsEntryItem> metrics) {
    this.metrics = metrics;
  }

  public RootResponse short_answer(String short_answer) {
    this.short_answer = short_answer;
    return this;
  }

   /**
   * Get short_answer
   * @return short_answer
  **/
  public String getShortAnswer() {
    return short_answer;
  }

  public void setShortAnswer(String short_answer) {
    this.short_answer = short_answer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RootResponse RootResponse = (RootResponse) o;
    return Objects.equals(this.defaultChart, RootResponse.defaultChart) &&
        Objects.equals(this.symbol, RootResponse.symbol) &&
        Objects.equals(this.lastUpdated, RootResponse.lastUpdated) &&
        Objects.equals(this.candlestickChart, RootResponse.candlestickChart) &&
        Objects.equals(this.data_table, RootResponse.data_table) &&
        Objects.equals(this.companyName, RootResponse.companyName) &&
        Objects.equals(this.lineChart, RootResponse.lineChart) &&
        Objects.equals(this.long_answer, RootResponse.long_answer) &&
        Objects.equals(this.currency, RootResponse.currency) &&
        Objects.equals(this.metrics, RootResponse.metrics) &&
        Objects.equals(this.short_answer, RootResponse.short_answer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultChart, symbol, lastUpdated, candlestickChart, data_table, companyName, lineChart, long_answer, currency, metrics, short_answer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RootResponse {\n");
    
    sb.append("    defaultChart: ").append(toIndentedString(defaultChart)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    candlestickChart: ").append(toIndentedString(candlestickChart)).append("\n");
    sb.append("    data_table: ").append(toIndentedString(data_table)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    lineChart: ").append(toIndentedString(lineChart)).append("\n");
    sb.append("    long_answer: ").append(toIndentedString(long_answer)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    short_answer: ").append(toIndentedString(short_answer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
