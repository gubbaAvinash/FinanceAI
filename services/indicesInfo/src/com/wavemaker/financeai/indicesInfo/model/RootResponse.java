/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.wavemaker.financeai.indicesInfo.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.wavemaker.financeai.indicesInfo.model.ResponseIndicesEntryItem;
import java.util.ArrayList;
import java.util.List;
/**
 * RootResponse
 */

public class RootResponse {
  @JsonProperty("market")
  private String market = null;

  @JsonProperty("unit")
  private String unit = null;

  @JsonProperty("indices")
  private List<ResponseIndicesEntryItem> indices = new ArrayList<>();

  @JsonProperty("refresh_interval")
  private String refresh_interval = null;

  @JsonProperty("asOf")
  private String asOf = null;

  @JsonProperty("source")
  private String source = null;

  public RootResponse market(String market) {
    this.market = market;
    return this;
  }

   /**
   * Get market
   * @return market
  **/
  public String getMarket() {
    return market;
  }

  public void setMarket(String market) {
    this.market = market;
  }

  public RootResponse unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  public RootResponse indices(List<ResponseIndicesEntryItem> indices) {
    this.indices = indices;
    return this;
  }

  public RootResponse addIndicesItem(ResponseIndicesEntryItem indicesItem) {
    this.indices.add(indicesItem);
    return this;
  }

   /**
   * Get indices
   * @return indices
  **/
  public List<ResponseIndicesEntryItem> getIndices() {
    return indices;
  }

  public void setIndices(List<ResponseIndicesEntryItem> indices) {
    this.indices = indices;
  }

  public RootResponse refresh_interval(String refresh_interval) {
    this.refresh_interval = refresh_interval;
    return this;
  }

   /**
   * Get refresh_interval
   * @return refresh_interval
  **/
  public String getRefreshInterval() {
    return refresh_interval;
  }

  public void setRefreshInterval(String refresh_interval) {
    this.refresh_interval = refresh_interval;
  }

  public RootResponse asOf(String asOf) {
    this.asOf = asOf;
    return this;
  }

   /**
   * Get asOf
   * @return asOf
  **/
  public String getAsOf() {
    return asOf;
  }

  public void setAsOf(String asOf) {
    this.asOf = asOf;
  }

  public RootResponse source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RootResponse RootResponse = (RootResponse) o;
    return Objects.equals(this.market, RootResponse.market) &&
        Objects.equals(this.unit, RootResponse.unit) &&
        Objects.equals(this.indices, RootResponse.indices) &&
        Objects.equals(this.refresh_interval, RootResponse.refresh_interval) &&
        Objects.equals(this.asOf, RootResponse.asOf) &&
        Objects.equals(this.source, RootResponse.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(market, unit, indices, refresh_interval, asOf, source);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RootResponse {\n");
    
    sb.append("    market: ").append(toIndentedString(market)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    indices: ").append(toIndentedString(indices)).append("\n");
    sb.append("    refresh_interval: ").append(toIndentedString(refresh_interval)).append("\n");
    sb.append("    asOf: ").append(toIndentedString(asOf)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
